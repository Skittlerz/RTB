<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Creating player physics properties
var phyPlayer;
phyPlayer = physics_fixture_create();
physics_fixture_set_circle_shape(phyPlayer, sprite_get_width(sprPlayer) / 2);
physics_fixture_set_density(phyPlayer, 1.0);
physics_fixture_set_collision_group(phyPlayer, 1);
physics_fixture_bind(phyPlayer, id);
physics_mass_properties(5, 0, 0, 0);
physics_fixture_delete(phyPlayer);
global.collision = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>with(objPlayer){
instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handling gravity

//Applying force to counter act the room gravity
physics_apply_force(x,y,0,-25);
image_speed = 0.6;
if(global.physicsEnabled){
        with (objPlanet) {
            if(global.moonOutsideUI) {
                dist = (point_distance(x,y,other.x,other.y) - (sprite_get_width(sprMoon)/2));
                dir = point_direction(other.x,other.y,x,y);
                //show_debug_message("Moon "+string(id)+" "+string(dist));
                if (dist &lt;= 250 &amp;&amp; dist &gt;= 150) {
                    dx = lengthdir_x(5,dir);
                    dy = lengthdir_y(5,dir);
                }
                else if (dist &lt; 150 &amp;&amp; dist &gt;= 100) {
                    dx = lengthdir_x(8,dir);
                    dy = lengthdir_y(8,dir);   
                }
                else if (dist &lt; 100 &amp;&amp; dist &gt;= 50) {
                    dx = lengthdir_x(12,dir);
                    dy = lengthdir_y(12,dir);   
                }
                else if (dist &lt; 50 &amp;&amp; dist &gt; 18) {
                    dx = lengthdir_x(15,dir);
                    dy = lengthdir_y(15,dir);   
                }
                else if (dist &lt;= 18) {
                    dx = lengthdir_x(2,dir);
                    dy = lengthdir_y(2,dir);    
                }
                else {
                    dx = 0;
                    dy = 0;
                }
                
                with (objPlayer) {
                    physics_apply_force(x,y,other.dx,other.dy);
                }
            }
        }

    
    with (objPlanet1) {
        dist = (point_distance(x,y,other.x,other.y) - (sprite_get_width(sprEarth) / 2));
        dir = point_direction(other.x,other.y,x,y);
    //show_debug_message("Earth "+string(id)+" "+string(dist));    
        if (dist &lt;= 200 &amp;&amp; dist &gt;= 100) {
            dx = lengthdir_x(20,dir);
            dy = lengthdir_y(20,dir);
        }
        else if (dist &lt; 100 &amp;&amp; dist &gt;= 50) {
            dx = lengthdir_x(40,dir);
            dy = lengthdir_y(40,dir);   
        }
        else if (dist &lt; 50 &amp;&amp; dist &gt; 26) {
            dx = lengthdir_x(70,dir);
            dy = lengthdir_y(70,dir);   
        }
        else if (dist &lt;= 25 &amp;&amp; dist &gt; 0) {
            dx = lengthdir_x(200,dir);
            dy = lengthdir_y(200,dir); 
        }
        else if (dist &lt;= 0) {
            dx = lengthdir_x(500,dir);
            dy = lengthdir_y(500,dir);    
        } 
        else {
            dx = 0;
            dy = 0;
        }
        
        with (objPlayer) {
            physics_apply_force(x,y,other.dx,other.dy);
        }
    }
    
    with (objAsteroid1) {
        if (global.asteroidOutsideUI) {
            dist = (point_distance(x,y,other.x,other.y) - (sprite_get_width(sprEarth) / 2));
            dir = point_direction(other.x,other.y,x,y);
        //show_debug_message("Asteroid "+string(id)+" "+string(dist));    
            if (dist &lt;= 200 &amp;&amp; dist &gt;= 100) {
                dx = lengthdir_x(3,dir);
                dy = lengthdir_y(3,dir);
            }
            else if (dist &lt; 100 &amp;&amp; dist &gt;= 50) {
                dx = lengthdir_x(7,dir);
                dy = lengthdir_y(7,dir);   
            }
            else if (dist &lt; 50 &amp;&amp; dist &gt; 18) {
                dx = lengthdir_x(12,dir);
                dy = lengthdir_y(12,dir);   
            }
            else if (dist &lt;= 18) {
                dx = lengthdir_x(0,dir);
                dy = lengthdir_y(0,dir);    
            }
            else {
                dx = 0;
                dy = 0;
            }
            
            with (objPlayer) {
                physics_apply_force(x,y,other.dx,other.dy);
            }
        }
    }
    
    //70% of room width and the starting y position of the player
    if(phy_position_x &gt; (room_width * 0.7) &amp;&amp; phy_position_y &lt;= 64) {
        show_debug_message(phy_position_x);
        show_debug_message(phy_position_y);
        instance_destroy();
    }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objAsteroid1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!global.collision){
global.collision = true;
sprite_index = sprExplosion;
alarm[0] = 4;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objPlanet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!global.collision){
sprite_index = sprExplosion;
alarm[0] = 5;
global.collision = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="39">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>physics_apply_local_force(0, 0, 100, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="38">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>physics_apply_local_force(0, 0, 0, -100);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="37">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (x &gt; 16) {
    physics_apply_local_force(0, 0, -100, 0);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Applying initial force
//physics_apply_force(x,y,200,0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>7,7</point>
    <point>7,7</point>
  </PhysicsShapePoints>
</object>
